% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/add_rasterizer.R
\name{add_rasterizer}
\alias{add_rasterizer}
\title{Add "rasterizer" trace to a plotly visualization}
\usage{
add_rasterizer(p, x = NULL, y = NULL, z = NULL, ..., data = NULL,
  inherit = TRUE, on = NULL, size = NULL, scaling = NULL)
}
\arguments{
\item{x}{The x variable, numerical vectors or expression and will be passed on `aes()`.}

\item{y}{The y variable, numerical vectors or expression and will be passed on `aes()`.}

\item{z}{A numeric matrix, if provided, `add_heatmap` will be called.}

\item{...}{Arguments (i.e., attributes) passed along to the trace type or `rasterizer`.}

\item{data}{A data frame (optional) or \link[crosstalk]{SharedData} object.}

\item{inherit}{Inherit attributes from \link[plotly]{plotly}}

\item{on}{Reduction "on" which variable, it is a numerical vectors or expression and will be passed on `aes()`.}

\item{size}{The size of pixel for each observation, a numerical vectors or expression and will be passed on `aes()`.}

\item{scaling}{It could be an artificial function or a scaling way ("log", "origin")}
}
\description{
Add trace to a plotly visualization
}
\examples{
\dontrun{
   library(rasterizer)
   if(requireNamespace("plotly") && requireNamespace("data.table")) {
     # Load data
     ridesRaw_1 <- "https://raw.githubusercontent.com/plotly/datasets/master/uber-rides-data1.csv" \%>\%
       data.table::fread(stringsAsFactors = FALSE)
     ridesRaw_2 <- "https://raw.githubusercontent.com/plotly/datasets/master/uber-rides-data2.csv" \%>\% 
       data.table::fread(stringsAsFactors = FALSE)
     ridesRaw_3 <- "https://raw.githubusercontent.com/plotly/datasets/master/uber-rides-data3.csv"  \%>\% 
       data.table::fread(stringsAsFactors = FALSE)
     ridesDf <- list(ridesRaw_1, ridesRaw_2, ridesRaw_3) \%>\% 
       data.table::rbindlist()
       
     #### quick start
     p <- plot_ly(data = ridesDf) \%>\% 
            add_rasterizer(x = ~Lat, y = ~Lon)
     p
     #### set artificial scaling function
     zeroOneTransform <- function(z) {
       minz <- min(z)
       maxz <- max(z)
       M <- matrix((z - minz)/(maxz - minz), nrow = dim(z)[1])
       return(M)
     }
     plot_ly(data = ridesDf) \%>\% 
       add_rasterizer(x = ~Lat, 
                      y = ~Lon, 
                      on = ~-Lat,
                      reduction_func = "max",
                      scaling = zeroOneTransform) \%>\%
       plotly::layout(
         xaxis = list(
           title = "x"
         ),
         yaxis = list(
           title = "y"
         )
       )
   }
}
}
