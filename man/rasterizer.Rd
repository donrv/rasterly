% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rasterizer.R
\name{rasterizer}
\alias{rasterizer}
\title{Rasterizer}
\usage{
rasterizer(data = NULL, mapping = aes(), ..., plot_width = 600,
  plot_height = 600, x_range = NULL, y_range = NULL,
  background = "#FFFFFF", colour_map = c("lightblue", "darkblue"),
  colour_key = NULL, show_raster = TRUE, remove_data = FALSE,
  variable_check = FALSE)
}
\arguments{
\item{data}{Dataset to use for plot. If not provided, data must be supplied in each layer of the plot.}

\item{mapping}{Default list of aesthetic mappings to use for plot. The same with `ggplot2`\link[aes]{aes}.
See details.}

\item{...}{Other arguments can be passed to layer.}

\item{plot_width}{The width of image, must be positive integer. Higher value indicates higher resolution.}

\item{plot_height}{The height of image, must be positive integer. Higher value indicates higher resolution.}

\item{x_range}{The range of x; It can be used to clip the image. Also, to large dataset, provided `x_range`
can help to speed code}

\item{y_range}{The range of y; It can be used to clip the image. Also, to large dataset, provided `y_range`
can help to speed code}

\item{background}{Background colour of this image. All layers share one background colour.}

\item{colour_map}{colour used to map in each pixel. The `colour_map` would be extended by linear interpolation
independently for RGB. The darkness of the colour depends on the aggregation matrix value.}

\item{colour_key}{Used for categorical variable. In general, `colour_key` would be called when "colour"
is set in `aes()`}

\item{show_raster}{Logical value. Whether show raster or not}

\item{remove_data}{Logical value. In general, data passed in has huge size which may take too many rooms. When data is 
manipulated by given `aes()`, original data can be removed via function `remove()` by setting `remove_data = TRUE`. See details 
for more information.}

\item{variable_check}{Logical value. Drop unused columns. Setting `TRUE` can help to save more space by sacrificing speed.}
}
\description{
Set initials for rasterizer
}
\details{
1. In `rasterizer`, only five arguments can be passed in `aes()`, "x", "y", "on", "colour" and "size".
variable "on" represents the reduction function works "on" which column. 
2. `remove_data` can help save space, however, drop original data can cause layers fail to set new `aes()`, 
ex: rasterizer(data, aes(x,y), ..., remove_data = TRUE) %>% rasterize_points() %>% rasterize_points(mapping = aes(x,y,on))
The second layer fail to set new `aes()` since the original data is missing, only manipulated dataframe is passed through.
}
\examples{
\dontrun{
   library(rasterizer)
   if(requireNamespace("grid") && requireNamespace("gridExtra")) {
     x <- rnorm(1e7)
     y <- rnorm(1e7)
     category <- sample(1:5, 1e7, replace = TRUE)
     data.frame(x = x, y = y, category = category) \%>\%
       rasterizer(mapping = aes(x = x, y = y, colour = category)) \%>\%
       rasterize_points(layout = "weighted") \%>\%
       execute() -> ds1

     data.frame(x = x, y = y, category = category) \%>\%
       rasterizer(mapping = aes(x = x, y = y, colour = category)) \%>\%
       rasterize_points(layout = "cover") \%>\%
       execute() -> ds2

     grid::grid.newpage()
     gridExtra::grid.arrange(
        grobs = list(grid::rasterGrob(ds1$image), grid::rasterGrob(ds2$image)),
        ncol = 2,
        top = "'weighted' layout versus 'cover' layout"
     )
   }
}
}
