% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plotRasterly.R
\name{plotRasterly}
\alias{plotRasterly}
\title{plotRasterly}
\usage{
plotRasterly(data = NULL, mapping = aes(), ..., plot_width = 400,
  plot_height = 400, x_range = NULL, y_range = NULL,
  background = "white", color = NULL, show_raster = TRUE,
  drop_data = FALSE, variable_check = FALSE, alpha = 0.5,
  shape = 19, size = 0.5, as_image = FALSE, sizing = c("stretch",
  "fill", "contain"))
}
\arguments{
\item{alpha}{The transparency of points, from 0 to 1.}

\item{shape}{The shape of points, see \link{pch}.}

\item{size}{The size of points.}

\item{as_image}{Logical value. If \code{FALSE}, image raster will be transformed into a data frame, hence a points layer
would be pipped on \code{plotly}; conversely, a raster layer will be added.}

\item{sizing}{It affects only with \code{as_image = TRUE}. Specifies which dimension of the image to constrain.
One of "stretch" "fill", "contain". see https://plot.ly/r/reference/#Layout_and_layout_style_objects}
}
\value{
a `plotly` widget
}
\description{
Display large data set in `plotly`
}
\examples{
\dontrun{
 library(rasterly)
 if(requireNamespace("plotly") && 
    requireNamespace("data.table") && 
    requireNamespace("lubridate")) {
   # Load data
 url1 <- "https://raw.githubusercontent.com/plotly/datasets/master/uber-rides-data1.csv"
 ridesRaw_1 <-  url1 \%>\%
   data.table::fread(stringsAsFactors = FALSE)
 url2 <- "https://raw.githubusercontent.com/plotly/datasets/master/uber-rides-data2.csv"
 ridesRaw_2 <-  url2 \%>\%
   data.table::fread(stringsAsFactors = FALSE)
 url3 <- "https://raw.githubusercontent.com/plotly/datasets/master/uber-rides-data3.csv"
 ridesRaw_3 <-  url3 \%>\%
   data.table::fread(stringsAsFactors = FALSE) 
 ridesDf <- list(ridesRaw_1, ridesRaw_2, ridesRaw_3) \%>\% 
   data.table::rbindlist()
       
 time <- lubridate::ymd_hms(ridesDf$`Date/Time`)
 ridesDf <-  
   ridesDf[, 'Date/Time':=NULL][, list(Lat, 
              Lon,                                               
              hour = lubridate::hour(time),                                                
              month = lubridate::month(time),
              day = lubridate::day(time))]
 # A point layer is added
 plotRasterly(data = ridesDf, 
              mapping = aes(x = Lat, y = Lon, color = hour),
              color = hourColors,
              as_image = FALSE)
  # An image layer is added       
  plotRasterly(data = ridesDf, 
               mapping = aes(x = Lat, y = Lon, color = hour),
               color = hourColors,
               as_image = TRUE)
  
 }
}
}
\seealso{
\link{ggRasterly}
}
