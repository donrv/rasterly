% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rasterize_points.R
\name{rasterize_points}
\alias{rasterize_points}
\title{rasterize_points}
\usage{
rasterize_points(rastObj, data = NULL, mapping = aes(), ...,
  xlim = NULL, ylim = NULL, max_size = NULL, reduction_func = NULL,
  layout = NULL, glyph = NULL, group_by_data_table = NULL,
  inherit.aes = TRUE)
}
\arguments{
\item{rastObj}{A "rasterly" object.}

\item{data}{Dataset to use for plot. If not provided (say `NULL`), data would be inherited by `rasterly()`; else 
input data could be a `data.frame` or some function with argument `x`.}

\item{mapping}{Default list of aesthetic mappings to use for plot. If provided and `inherit.aes = TRUE`, it will be
merged on top of `rasterly()` mapping.}

\item{...}{Arguments passed by `rasterly()`}

\item{xlim}{X limits in this layer}

\item{ylim}{Y limits in this layer}

\item{max_size}{When size is modifed, how many pixels an observation point will be spreaded.}

\item{reduction_func}{A reduction operator function is used when aggregating datapoints
into a given pixel. The supported reduction operators are `sum`, `any`, `mean`, `m2`, `first`, 
`last`, `min` and `max` so far. Default is `sum`. See details.}

\item{layout}{The way to layout multiple images, default is `weighted`. 
It is useful when data is catergorical("colour" is set in `aes()`). The default setting is "weighted", 
which means the final raster is the weighted combination of each categorical aggregation matrix. 
Also, we can "cover" each raster by the order of categories.}

\item{glyph}{When increase the size, the pixels would be spreaded as a square (same speed on four directions) 
or a circle (It is more like diamond? Will fix in the future)}

\item{group_by_data_table}{Logical Value and defualt is `TRUE`. When set "colour" in `aes()`, 
"group by" data set by "data.table" (`TRUE`) or a Rcpp loop (`FALSE`). In general, set `group_by_data_table = TRUE` 
is faster, however, if the dataset is extremely large, the speed is not as stable as a Rcpp loop.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics, rather than combining with them. 
See \code{\link{layer}}}
}
\value{
A list of environments.
}
\description{
Points layer for "rasterly".
}
\details{
Reduction functions
\itemize{
 \item{`sum`: If `on` is not provided in mapping `aes()`, it is the count of each bins; else it would be summation of 
 `on` variable falling in that bin}
 \item{`any`: If `on` is not provided in mapping `aes()`, it is the logical value if the bin is visited; else it would be 
 any `on` variable falling in that bin}
 \item{`mean`: If `on` is not provided in mapping `aes()`, `on` would be set as variable "y" by default. 
 Give the mean of `on` variable falling in that bin}
 \item{`m2`: `on` must be provided in mapping `aes()`. Give the sum of mean squares of `on` variable falling in that bin}
 \item{`var`: `on` must be provided in mapping `aes()`. Give the variance of `on` variable falling in that bin}
 \item{`sd`: `on` must be provided in mapping `aes()`. Give the standard deviation of `on` variable falling in that bin}
 \item{`first`: `on` must be provided in mapping `aes()`. Give the first `on` variable element falling in that bin}
 \item{`last`: `on` must be provided in mapping `aes()`. Give the last `on` variable element falling in that bin}
 \item{`min`: `on` must be provided in mapping `aes()`. Give the max `on` variable element falling in that bin}
 \item{`max`: `on` must be provided in mapping `aes()`. Give the min `on` variable element falling in that bin}
 
}
}
\examples{
\dontrun{
   library(rasterly)
   if(requireNamespace("grid") && requireNamespace("gridExtra")) {
     x <- rnorm(1e7)
     y <- rnorm(1e7)
     category <- sample(1:5, 1e7, replace = TRUE)
     data.frame(x = x, y = y, category = category) \%>\%
       rasterly(mapping = aes(x = x, y = y, colour = category)) \%>\%
       rasterize_points(layout = "weighted") -> ds1
     ds1
     # layout with cover
     data.frame(x = x, y = y, category = category) \%>\%
       rasterly(mapping = aes(x = x, y = y, colour = category)) \%>\%
       rasterize_points(layout = "cover") -> ds2
     ds2
     # display side by side
     grid::grid.newpage()
     gridExtra::grid.arrange(
        grobs = list(rasterlyGrob(ds1), rasterlyGrob(ds2)),
        ncol = 2,
        top = "'weighted' layout versus 'cover' layout"
     )
   }
}
}
\seealso{
\link{rasterly}, \link{rasterly_build}, \link{[.rasterly}, \link{[<-.rasterly}
}
