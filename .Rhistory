# ======================================================================================
# ================================  display  ===========================================
# ======================================================================================
## grid
library(grid)
grid.newpage()
grid.raster(ds$image)
dat <- nyc[, .(pickup_x, pickup_y, pick_up_hour)]
start_time <- Sys.time()
# `colour_key` matches the unique colour
canvas(dat,
mapping = aes(x = pickup_x, y = pickup_y, on = -pickup_x),
background = "black",
x_range = c(min_x, max_x),
y_range = c(min_y, max_y),
colour_key = colors) %>%
aggregation_points(colour_map = fire, reduction_func = "mean") %>%
rasterizer() -> ds
end_time <- Sys.time()
end_time - start_time
# ======================================================================================
# ================================  display  ===========================================
# ======================================================================================
## grid
library(grid)
grid.newpage()
grid.raster(ds$image)
dat <- nyc[, .(pickup_x, pickup_y, pick_up_hour)]
start_time <- Sys.time()
# `colour_key` matches the unique colour
canvas(dat,
mapping = aes(x = pickup_x, y = pickup_y, on = -pickup_x),
background = "black",
x_range = c(min_x, max_x),
y_range = c(min_y, max_y),
colour_key = colors) %>%
aggregation_points(colour_map = fire, reduction_func = "mean") %>%
rasterizer() -> ds
end_time <- Sys.time()
end_time - start_time
# ======================================================================================
# ================================  display  ===========================================
# ======================================================================================
## grid
library(grid)
grid.newpage()
grid.raster(ds$image)
dat <- nyc[, .(pickup_x, pickup_y, pick_up_hour)]
start_time <- Sys.time()
# `colour_key` matches the unique colour
canvas(dat,
mapping = aes(x = pickup_x, y = pickup_y, on = -pickup_x),
background = "black",
x_range = c(min_x, max_x),
y_range = c(min_y, max_y),
colour_key = colors) %>%
aggregation_points(colour_map = fire, reduction_func = "mean") %>%
rasterizer() -> ds
end_time <- Sys.time()
end_time - start_time
# ======================================================================================
# ================================  display  ===========================================
# ======================================================================================
## grid
library(grid)
grid.newpage()
grid.raster(ds$image)
dat <- nyc[, .(pickup_x, pickup_y, pick_up_hour)]
start_time <- Sys.time()
# `colour_key` matches the unique colour
canvas(dat,
mapping = aes(x = pickup_x, y = pickup_y, on = -pickup_x),
background = "black",
x_range = c(min_x, max_x),
y_range = c(min_y, max_y),
colour_key = colors) %>%
aggregation_points(colour_map = fire, reduction_func = "mean") %>%
rasterizer() -> ds
end_time <- Sys.time()
end_time - start_time
# ======================================================================================
# ================================  display  ===========================================
# ======================================================================================
## grid
library(grid)
grid.newpage()
grid.raster(ds$image)
dat <- nyc[, .(pickup_x, pickup_y, pick_up_hour)]
start_time <- Sys.time()
# `colour_key` matches the unique colour
canvas(dat,
mapping = aes(x = pickup_x, y = pickup_y, on = -pickup_x),
background = "black",
x_range = c(min_x, max_x),
y_range = c(min_y, max_y),
colour_key = colors) %>%
aggregation_points(colour_map = fire, reduction_func = "mean") %>%
rasterizer() -> ds
end_time <- Sys.time()
end_time - start_time
# ======================================================================================
# ================================  display  ===========================================
# ======================================================================================
## grid
library(grid)
grid.newpage()
grid.raster(ds$image)
dat <- nyc[, .(pickup_x, pickup_y, pick_up_hour)]
start_time <- Sys.time()
# `colour_key` matches the unique colour
canvas(dat,
mapping = aes(x = pickup_x, y = pickup_y, on = -pickup_x),
background = "black",
x_range = c(min_x, max_x),
y_range = c(min_y, max_y),
colour_key = colors) %>%
aggregation_points(colour_map = fire, reduction_func = "mean") %>%
rasterizer() -> ds
end_time <- Sys.time()
end_time - start_time
# ======================================================================================
# ================================  display  ===========================================
# ======================================================================================
## grid
library(grid)
grid.newpage()
grid.raster(ds$image)
dat <- nyc[, .(pickup_x, pickup_y, pick_up_hour)]
start_time <- Sys.time()
# `colour_key` matches the unique colour
canvas(dat,
mapping = aes(x = pickup_x, y = pickup_y, on = pickup_x),
background = "black",
x_range = c(min_x, max_x),
y_range = c(min_y, max_y),
colour_key = colors) %>%
aggregation_points(colour_map = fire, reduction_func = "mean") %>%
rasterizer() -> ds
end_time <- Sys.time()
end_time - start_time
# ======================================================================================
# ================================  display  ===========================================
# ======================================================================================
## grid
library(grid)
grid.newpage()
grid.raster(ds$image)
dat <- nyc[, .(pickup_x, pickup_y, pick_up_hour)]
start_time <- Sys.time()
# `colour_key` matches the unique colour
canvas(dat,
mapping = aes(x = pickup_x, y = pickup_y, on = pickup_x),
background = "black",
x_range = c(min_x, max_x),
y_range = c(min_y, max_y),
colour_key = colors) %>%
aggregation_points(colour_map = fire, reduction_func = "mean") %>%
rasterizer() -> ds
end_time <- Sys.time()
end_time - start_time
# ======================================================================================
# ================================  display  ===========================================
# ======================================================================================
## grid
library(grid)
grid.newpage()
grid.raster(ds$image)
dat <- nyc[, .(pickup_x, pickup_y, pick_up_hour)]
start_time <- Sys.time()
# `colour_key` matches the unique colour
canvas(dat,
mapping = aes(x = pickup_x, y = pickup_y, on = pickup_x),
background = "black",
x_range = c(min_x, max_x),
y_range = c(min_y, max_y),
colour_key = colors) %>%
aggregation_points(colour_map = fire, reduction_func = "mean") %>%
rasterizer() -> ds
end_time <- Sys.time()
end_time - start_time
# ======================================================================================
# ================================  display  ===========================================
# ======================================================================================
## grid
library(grid)
grid.newpage()
grid.raster(ds$image)
dat <- nyc[, .(pickup_x, pickup_y, pick_up_hour)]
start_time <- Sys.time()
# `colour_key` matches the unique colour
canvas(dat,
mapping = aes(x = pickup_x, y = pickup_y, on = pickup_x),
background = "black",
x_range = c(min_x, max_x),
y_range = c(min_y, max_y),
colour_key = colors) %>%
aggregation_points(colour_map = fire, reduction_func = "mean") %>%
rasterizer() -> ds
end_time <- Sys.time()
end_time - start_time
# ======================================================================================
# ================================  display  ===========================================
# ======================================================================================
## grid
library(grid)
grid.newpage()
grid.raster(ds$image)
dat <- nyc[, .(pickup_x, pickup_y, pick_up_hour)]
start_time <- Sys.time()
# `colour_key` matches the unique colour
canvas(dat,
mapping = aes(x = pickup_x, y = pickup_y, on = pickup_x),
background = "black",
x_range = c(min_x, max_x),
y_range = c(min_y, max_y),
colour_key = colors) %>%
aggregation_points(colour_map = fire, reduction_func = "mean") %>%
rasterizer() -> ds
end_time <- Sys.time()
end_time - start_time
# ======================================================================================
# ================================  display  ===========================================
# ======================================================================================
## grid
library(grid)
grid.newpage()
grid.raster(ds$image)
dat <- nyc[, .(pickup_x, pickup_y, pick_up_hour)]
start_time <- Sys.time()
# `colour_key` matches the unique colour
canvas(dat,
mapping = aes(x = pickup_x, y = pickup_y, on = pickup_x),
background = "black",
x_range = c(min_x, max_x),
y_range = c(min_y, max_y),
colour_key = colors) %>%
aggregation_points(colour_map = fire, reduction_func = "mean") %>%
rasterizer() -> ds
end_time <- Sys.time()
end_time - start_time
# ======================================================================================
# ================================  display  ===========================================
# ======================================================================================
## grid
library(grid)
grid.newpage()
grid.raster(ds$image)
dat <- nyc[, .(pickup_x, pickup_y, pick_up_hour)]
start_time <- Sys.time()
# `colour_key` matches the unique colour
canvas(dat,
mapping = aes(x = pickup_x, y = pickup_y, on = pickup_x),
background = "black",
x_range = c(min_x, max_x),
y_range = c(min_y, max_y),
colour_key = colors) %>%
aggregation_points(colour_map = fire, reduction_func = "mean") %>%
rasterizer() -> ds
end_time <- Sys.time()
end_time - start_time
# ======================================================================================
# ================================  display  ===========================================
# ======================================================================================
## grid
library(grid)
grid.newpage()
grid.raster(ds$image)
dat <- nyc[, .(pickup_x, pickup_y, pick_up_hour)]
start_time <- Sys.time()
# `colour_key` matches the unique colour
canvas(dat,
mapping = aes(x = pickup_x, y = pickup_y, on = -pickup_y),
background = "black",
x_range = c(min_x, max_x),
y_range = c(min_y, max_y),
colour_key = colors) %>%
aggregation_points(colour_map = fire, reduction_func = "mean") %>%
rasterizer() -> ds
end_time <- Sys.time()
end_time - start_time
library(grid)
grid.newpage()
grid.raster(ds$image)
start_time <- Sys.time()
# `colour_key` matches the unique colour
canvas(dat,
mapping = aes(x = pickup_x, y = pickup_y, on = -pickup_y, colour = pick_up_hour),
background = "black",
x_range = c(min_x, max_x),
y_range = c(min_y, max_y),
colour_key = colors) %>%
aggregation_points(colour_map = fire, reduction_func = "mean") %>%
rasterizer() -> ds
end_time <- Sys.time()
end_time - start_time
# ======================================================================================
# ================================  display  ===========================================
# ======================================================================================
## grid
library(grid)
grid.newpage()
grid.raster(ds$image)
dat <- nyc[, .(pickup_x, pickup_y, pick_up_hour)]
start_time <- Sys.time()
# `colour_key` matches the unique colour
canvas(dat,
mapping = aes(x = pickup_x, y = pickup_y, on = pickup_y, colour = pick_up_hour),
background = "black",
x_range = c(min_x, max_x),
y_range = c(min_y, max_y),
colour_key = colors) %>%
aggregation_points(colour_map = fire, reduction_func = "mean") %>%
rasterizer() -> ds
end_time <- Sys.time()
end_time - start_time
# ======================================================================================
# ================================  display  ===========================================
# ======================================================================================
## grid
library(grid)
grid.newpage()
grid.raster(ds$image)
dat <- nyc[, .(pickup_x, pickup_y, pick_up_hour)]
start_time <- Sys.time()
# `colour_key` matches the unique colour
canvas(dat,
mapping = aes(x = pickup_x, y = pickup_y, on = pickup_x, colour = pick_up_hour),
background = "black",
x_range = c(min_x, max_x),
y_range = c(min_y, max_y),
colour_key = colors) %>%
aggregation_points(colour_map = fire, reduction_func = "mean") %>%
rasterizer() -> ds
end_time <- Sys.time()
end_time - start_time
# ======================================================================================
# ================================  display  ===========================================
# ======================================================================================
## grid
library(grid)
grid.newpage()
grid.raster(ds$image)
dat <- nyc[, .(pickup_x, pickup_y, pick_up_hour)]
start_time <- Sys.time()
# `colour_key` matches the unique colour
canvas(dat,
mapping = aes(x = pickup_x, y = pickup_y, on = pickup_x),
background = "black",
x_range = c(min_x, max_x),
y_range = c(min_y, max_y),
colour_key = colors) %>%
aggregation_points(colour_map = fire, reduction_func = "mean") %>%
rasterizer() -> ds
end_time <- Sys.time()
end_time - start_time
# ======================================================================================
# ================================  display  ===========================================
# ======================================================================================
## grid
library(grid)
grid.newpage()
grid.raster(ds$image)
start_time <- Sys.time()
# `colour_key` matches the unique colour
canvas(dat,
mapping = aes(x = pickup_x, y = pickup_y, on = pickup_x, colour = pick_up_hour),
background = "black",
x_range = c(min_x, max_x),
y_range = c(min_y, max_y),
colour_key = colors) %>%
aggregation_points(colour_map = fire, reduction_func = "mean", layout = "cover") %>%
rasterizer() -> ds
end_time <- Sys.time()
end_time - start_time
# ======================================================================================
# ================================  display  ===========================================
# ======================================================================================
## grid
library(grid)
grid.newpage()
grid.raster(ds$image)
start_time <- Sys.time()
# `colour_key` matches the unique colour
canvas(dat,
mapping = aes(x = pickup_x, y = pickup_y, on = pickup_x, colour = pick_up_hour),
background = "black",
x_range = c(min_x, max_x),
y_range = c(min_y, max_y),
colour_key = colors) %>%
aggregation_points(colour_map = fire, reduction_func = "sum", layout = "cover") %>%
rasterizer() -> ds
end_time <- Sys.time()
end_time - start_time
# ======================================================================================
# ================================  display  ===========================================
# ======================================================================================
## grid
library(grid)
grid.newpage()
grid.raster(ds$image)
start_time <- Sys.time()
# `colour_key` matches the unique colour
canvas(dat,
mapping = aes(x = pickup_x, y = pickup_y, colour = pick_up_hour),
background = "black",
x_range = c(min_x, max_x),
y_range = c(min_y, max_y),
colour_key = colors) %>%
aggregation_points(colour_map = fire, reduction_func = "sum", layout = "cover") %>%
rasterizer() -> ds
end_time <- Sys.time()
end_time - start_time
# ======================================================================================
# ================================  display  ===========================================
# ======================================================================================
## grid
library(grid)
grid.newpage()
grid.raster(ds$image)
start_time <- Sys.time()
# `colour_key` matches the unique colour
canvas(dat,
mapping = aes(x = pickup_x, y = pickup_y, on = pickup_x),
background = "black",
x_range = c(min_x, max_x),
y_range = c(min_y, max_y),
colour_key = colors) %>%
aggregation_points(colour_map = fire, reduction_func = "mean", layout = "cover", group_by_data_table = FALSE) %>%
rasterizer() -> ds
end_time <- Sys.time()
end_time - start_time
# ======================================================================================
# ================================  display  ===========================================
# ======================================================================================
## grid
library(grid)
grid.newpage()
grid.raster(ds$image)
?stopifnot
sourceCpp("C:/Users/Zehao/Desktop/datashadeR/sacha.cpp")
library(Rcpp)
sourceCpp("C:/Users/Zehao/Desktop/datashadeR/sacha.cpp")
sourceCpp("C:/Users/Zehao/Desktop/datashadeR/sacha.cpp")
sourceCpp("C:/Users/Zehao/Desktop/datashadeR/sacha.cpp")
sourceCpp("C:/Users/Zehao/Desktop/datashadeR/sacha.cpp")
sourceCpp("C:/Users/Zehao/Desktop/datashadeR/sacha.cpp")
sourceCpp("C:/Users/Zehao/Desktop/datashadeR/sacha.cpp")
foo1(c("x", "foo","s"))
sourceCpp("C:/Users/Zehao/Desktop/datashadeR/sacha.cpp")
foo1(c("x", "foo","s"))
sourceCpp("C:/Users/Zehao/Desktop/datashadeR/sacha.cpp")
foo1(c("x", "foo","s"))
x = foo1(c("x", "foo","s"))
x$M[1,1]
x$M[1,1] == 1
x$M[1,1] == 1+1e-8
sourceCpp("C:/Users/Zehao/Desktop/datashadeR/sacha.cpp")
sourceCpp("C:/Users/Zehao/Desktop/datashadeR/sacha.cpp")
sourceCpp("C:/Users/Zehao/Desktop/datashadeR/sacha.cpp")
foo1(c("x", "foo","s"))
library(rasterizer)
remove.packages("rasterizer")
library(rasterizer)
nyc <- data.table::fread("C:/Users/Zehao/Documents/GitHub/dash-datashader/datashader-examples/data/nyc_taxi.csv")
colors <- c("#FF0000","#FF3F00","#FF7F00","#FFBF00","#FFFF00","#BFFF00","#7FFF00","#3FFF00",
"#00FF00","#00FF3F","#00FF7F","#00FFBF","#00FFFF","#00BFFF","#007FFF","#003FFF",
"#0000FF","#3F00FF","#7F00FF","#BF00FF","#FF00FF","#FF00BF","#FF007F","#FF003F")
colors <- colors[unique(nyc$pick_up_hour) + 1]
max_x <- max(nyc$pickup_x)
min_x <- min(nyc$pickup_x)
max_y <- max(nyc$pickup_y)
min_y <- min(nyc$pickup_y)
library(magrittr)
library(grid)
library(rasterizer)
start_time <- Sys.time()
# `colour_key` matches the unique colour
canvas(nyc,
mapping = aes(x = pickup_x, y = pickup_y),
background = "black",
x_range = c(min_x, max_x),
y_range = c(min_y, max_y)) %>%
aggregation_points(xlim = c(min_x, (max_x + min_x)/2),
ylim = c(min_y, (max_y + min_y)/2),
colour_map = fire) %>%
aggregation_points(xlim = c((max_x + min_x)/2, max_x),
ylim = c(min_y, (max_y + min_y)/2),
colour_map = c("lightblue", "darkblue")) %>%
aggregation_points(mapping = aes(x = pickup_x, y = pickup_y, colour = pick_up_hour),
xlim = c((max_x + min_x)/2, max_x),
ylim = c((max_y + min_y)/2, max_y),
colour_key = colors) %>%
aggregation_points(mapping = aes(x = pickup_x, y = pickup_y, colour = pick_up_hour, size = passenger_count),
xlim = c(min_x, (max_x + min_x)/2),
ylim = c((max_y + min_y)/2, max_y),
max_size = 3,
layout = "cover") %>%
rasterizer() -> ds
end_time <- Sys.time()
end_time - start_time
library(grid)
grid.newpage()
grid.raster(ds$image)
## plot_ly
system.file("nyc_taxi.csv", package="rasterizer")
?system.file
system.file("nyc_taxi.csv", ..., package="rasterizer")
system.file("testdata", ..., package="rasterizer")
system.file("testdata", package="rasterizer")
system.file("testdata", package="rasterizer")
nyc <- data.table::fread("testdata/nyc_taxi.csv")
getwd()
